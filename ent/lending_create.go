// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"lending-system/ent/lending"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LendingCreate is the builder for creating a Lending entity.
type LendingCreate struct {
	config
	mutation *LendingMutation
	hooks    []Hook
}

// SetDate sets the "date" field.
func (lc *LendingCreate) SetDate(s string) *LendingCreate {
	lc.mutation.SetDate(s)
	return lc
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (lc *LendingCreate) SetNillableDate(s *string) *LendingCreate {
	if s != nil {
		lc.SetDate(*s)
	}
	return lc
}

// SetNotes sets the "notes" field.
func (lc *LendingCreate) SetNotes(s string) *LendingCreate {
	lc.mutation.SetNotes(s)
	return lc
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (lc *LendingCreate) SetNillableNotes(s *string) *LendingCreate {
	if s != nil {
		lc.SetNotes(*s)
	}
	return lc
}

// Mutation returns the LendingMutation object of the builder.
func (lc *LendingCreate) Mutation() *LendingMutation {
	return lc.mutation
}

// Save creates the Lending in the database.
func (lc *LendingCreate) Save(ctx context.Context) (*Lending, error) {
	lc.defaults()
	return withHooks(ctx, lc.sqlSave, lc.mutation, lc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lc *LendingCreate) SaveX(ctx context.Context) *Lending {
	v, err := lc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lc *LendingCreate) Exec(ctx context.Context) error {
	_, err := lc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lc *LendingCreate) ExecX(ctx context.Context) {
	if err := lc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lc *LendingCreate) defaults() {
	if _, ok := lc.mutation.Date(); !ok {
		v := lending.DefaultDate
		lc.mutation.SetDate(v)
	}
	if _, ok := lc.mutation.Notes(); !ok {
		v := lending.DefaultNotes
		lc.mutation.SetNotes(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lc *LendingCreate) check() error {
	if _, ok := lc.mutation.Date(); !ok {
		return &ValidationError{Name: "date", err: errors.New(`ent: missing required field "Lending.date"`)}
	}
	if _, ok := lc.mutation.Notes(); !ok {
		return &ValidationError{Name: "notes", err: errors.New(`ent: missing required field "Lending.notes"`)}
	}
	return nil
}

func (lc *LendingCreate) sqlSave(ctx context.Context) (*Lending, error) {
	if err := lc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	lc.mutation.id = &_node.ID
	lc.mutation.done = true
	return _node, nil
}

func (lc *LendingCreate) createSpec() (*Lending, *sqlgraph.CreateSpec) {
	var (
		_node = &Lending{config: lc.config}
		_spec = sqlgraph.NewCreateSpec(lending.Table, sqlgraph.NewFieldSpec(lending.FieldID, field.TypeInt))
	)
	if value, ok := lc.mutation.Date(); ok {
		_spec.SetField(lending.FieldDate, field.TypeString, value)
		_node.Date = value
	}
	if value, ok := lc.mutation.Notes(); ok {
		_spec.SetField(lending.FieldNotes, field.TypeString, value)
		_node.Notes = value
	}
	return _node, _spec
}

// LendingCreateBulk is the builder for creating many Lending entities in bulk.
type LendingCreateBulk struct {
	config
	builders []*LendingCreate
}

// Save creates the Lending entities in the database.
func (lcb *LendingCreateBulk) Save(ctx context.Context) ([]*Lending, error) {
	specs := make([]*sqlgraph.CreateSpec, len(lcb.builders))
	nodes := make([]*Lending, len(lcb.builders))
	mutators := make([]Mutator, len(lcb.builders))
	for i := range lcb.builders {
		func(i int, root context.Context) {
			builder := lcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LendingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lcb *LendingCreateBulk) SaveX(ctx context.Context) []*Lending {
	v, err := lcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lcb *LendingCreateBulk) Exec(ctx context.Context) error {
	_, err := lcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lcb *LendingCreateBulk) ExecX(ctx context.Context) {
	if err := lcb.Exec(ctx); err != nil {
		panic(err)
	}
}
