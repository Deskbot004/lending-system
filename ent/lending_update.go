// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"lending-system/ent/lending"
	"lending-system/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LendingUpdate is the builder for updating Lending entities.
type LendingUpdate struct {
	config
	hooks    []Hook
	mutation *LendingMutation
}

// Where appends a list predicates to the LendingUpdate builder.
func (lu *LendingUpdate) Where(ps ...predicate.Lending) *LendingUpdate {
	lu.mutation.Where(ps...)
	return lu
}

// SetDate sets the "date" field.
func (lu *LendingUpdate) SetDate(s string) *LendingUpdate {
	lu.mutation.SetDate(s)
	return lu
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (lu *LendingUpdate) SetNillableDate(s *string) *LendingUpdate {
	if s != nil {
		lu.SetDate(*s)
	}
	return lu
}

// SetNotes sets the "notes" field.
func (lu *LendingUpdate) SetNotes(s string) *LendingUpdate {
	lu.mutation.SetNotes(s)
	return lu
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (lu *LendingUpdate) SetNillableNotes(s *string) *LendingUpdate {
	if s != nil {
		lu.SetNotes(*s)
	}
	return lu
}

// Mutation returns the LendingMutation object of the builder.
func (lu *LendingUpdate) Mutation() *LendingMutation {
	return lu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lu *LendingUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, lu.sqlSave, lu.mutation, lu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lu *LendingUpdate) SaveX(ctx context.Context) int {
	affected, err := lu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lu *LendingUpdate) Exec(ctx context.Context) error {
	_, err := lu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lu *LendingUpdate) ExecX(ctx context.Context) {
	if err := lu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (lu *LendingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(lending.Table, lending.Columns, sqlgraph.NewFieldSpec(lending.FieldID, field.TypeInt))
	if ps := lu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lu.mutation.Date(); ok {
		_spec.SetField(lending.FieldDate, field.TypeString, value)
	}
	if value, ok := lu.mutation.Notes(); ok {
		_spec.SetField(lending.FieldNotes, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lending.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lu.mutation.done = true
	return n, nil
}

// LendingUpdateOne is the builder for updating a single Lending entity.
type LendingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LendingMutation
}

// SetDate sets the "date" field.
func (luo *LendingUpdateOne) SetDate(s string) *LendingUpdateOne {
	luo.mutation.SetDate(s)
	return luo
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (luo *LendingUpdateOne) SetNillableDate(s *string) *LendingUpdateOne {
	if s != nil {
		luo.SetDate(*s)
	}
	return luo
}

// SetNotes sets the "notes" field.
func (luo *LendingUpdateOne) SetNotes(s string) *LendingUpdateOne {
	luo.mutation.SetNotes(s)
	return luo
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (luo *LendingUpdateOne) SetNillableNotes(s *string) *LendingUpdateOne {
	if s != nil {
		luo.SetNotes(*s)
	}
	return luo
}

// Mutation returns the LendingMutation object of the builder.
func (luo *LendingUpdateOne) Mutation() *LendingMutation {
	return luo.mutation
}

// Where appends a list predicates to the LendingUpdate builder.
func (luo *LendingUpdateOne) Where(ps ...predicate.Lending) *LendingUpdateOne {
	luo.mutation.Where(ps...)
	return luo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (luo *LendingUpdateOne) Select(field string, fields ...string) *LendingUpdateOne {
	luo.fields = append([]string{field}, fields...)
	return luo
}

// Save executes the query and returns the updated Lending entity.
func (luo *LendingUpdateOne) Save(ctx context.Context) (*Lending, error) {
	return withHooks(ctx, luo.sqlSave, luo.mutation, luo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (luo *LendingUpdateOne) SaveX(ctx context.Context) *Lending {
	node, err := luo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (luo *LendingUpdateOne) Exec(ctx context.Context) error {
	_, err := luo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luo *LendingUpdateOne) ExecX(ctx context.Context) {
	if err := luo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (luo *LendingUpdateOne) sqlSave(ctx context.Context) (_node *Lending, err error) {
	_spec := sqlgraph.NewUpdateSpec(lending.Table, lending.Columns, sqlgraph.NewFieldSpec(lending.FieldID, field.TypeInt))
	id, ok := luo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Lending.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := luo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, lending.FieldID)
		for _, f := range fields {
			if !lending.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != lending.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := luo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := luo.mutation.Date(); ok {
		_spec.SetField(lending.FieldDate, field.TypeString, value)
	}
	if value, ok := luo.mutation.Notes(); ok {
		_spec.SetField(lending.FieldNotes, field.TypeString, value)
	}
	_node = &Lending{config: luo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, luo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lending.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	luo.mutation.done = true
	return _node, nil
}
