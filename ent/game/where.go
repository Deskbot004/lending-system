// Code generated by ent, DO NOT EDIT.

package game

import (
	"lending-system/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Game {
	return predicate.Game(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Game {
	return predicate.Game(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Game {
	return predicate.Game(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Game {
	return predicate.Game(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Game {
	return predicate.Game(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Game {
	return predicate.Game(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Game {
	return predicate.Game(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Game {
	return predicate.Game(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Game {
	return predicate.Game(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Game {
	return predicate.Game(sql.FieldEQ(FieldName, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.Game {
	return predicate.Game(sql.FieldEQ(FieldType, v))
}

// Ou applies equality check predicate on the "ou" field. It's identical to OuEQ.
func Ou(v string) predicate.Game {
	return predicate.Game(sql.FieldEQ(FieldOu, v))
}

// Cu applies equality check predicate on the "cu" field. It's identical to CuEQ.
func Cu(v string) predicate.Game {
	return predicate.Game(sql.FieldEQ(FieldCu, v))
}

// Notes applies equality check predicate on the "notes" field. It's identical to NotesEQ.
func Notes(v string) predicate.Game {
	return predicate.Game(sql.FieldEQ(FieldNotes, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Game {
	return predicate.Game(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Game {
	return predicate.Game(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Game {
	return predicate.Game(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Game {
	return predicate.Game(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Game {
	return predicate.Game(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Game {
	return predicate.Game(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Game {
	return predicate.Game(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Game {
	return predicate.Game(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Game {
	return predicate.Game(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Game {
	return predicate.Game(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Game {
	return predicate.Game(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Game {
	return predicate.Game(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Game {
	return predicate.Game(sql.FieldContainsFold(FieldName, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.Game {
	return predicate.Game(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.Game {
	return predicate.Game(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.Game {
	return predicate.Game(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.Game {
	return predicate.Game(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.Game {
	return predicate.Game(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.Game {
	return predicate.Game(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.Game {
	return predicate.Game(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.Game {
	return predicate.Game(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.Game {
	return predicate.Game(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.Game {
	return predicate.Game(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.Game {
	return predicate.Game(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.Game {
	return predicate.Game(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.Game {
	return predicate.Game(sql.FieldContainsFold(FieldType, v))
}

// OuEQ applies the EQ predicate on the "ou" field.
func OuEQ(v string) predicate.Game {
	return predicate.Game(sql.FieldEQ(FieldOu, v))
}

// OuNEQ applies the NEQ predicate on the "ou" field.
func OuNEQ(v string) predicate.Game {
	return predicate.Game(sql.FieldNEQ(FieldOu, v))
}

// OuIn applies the In predicate on the "ou" field.
func OuIn(vs ...string) predicate.Game {
	return predicate.Game(sql.FieldIn(FieldOu, vs...))
}

// OuNotIn applies the NotIn predicate on the "ou" field.
func OuNotIn(vs ...string) predicate.Game {
	return predicate.Game(sql.FieldNotIn(FieldOu, vs...))
}

// OuGT applies the GT predicate on the "ou" field.
func OuGT(v string) predicate.Game {
	return predicate.Game(sql.FieldGT(FieldOu, v))
}

// OuGTE applies the GTE predicate on the "ou" field.
func OuGTE(v string) predicate.Game {
	return predicate.Game(sql.FieldGTE(FieldOu, v))
}

// OuLT applies the LT predicate on the "ou" field.
func OuLT(v string) predicate.Game {
	return predicate.Game(sql.FieldLT(FieldOu, v))
}

// OuLTE applies the LTE predicate on the "ou" field.
func OuLTE(v string) predicate.Game {
	return predicate.Game(sql.FieldLTE(FieldOu, v))
}

// OuContains applies the Contains predicate on the "ou" field.
func OuContains(v string) predicate.Game {
	return predicate.Game(sql.FieldContains(FieldOu, v))
}

// OuHasPrefix applies the HasPrefix predicate on the "ou" field.
func OuHasPrefix(v string) predicate.Game {
	return predicate.Game(sql.FieldHasPrefix(FieldOu, v))
}

// OuHasSuffix applies the HasSuffix predicate on the "ou" field.
func OuHasSuffix(v string) predicate.Game {
	return predicate.Game(sql.FieldHasSuffix(FieldOu, v))
}

// OuEqualFold applies the EqualFold predicate on the "ou" field.
func OuEqualFold(v string) predicate.Game {
	return predicate.Game(sql.FieldEqualFold(FieldOu, v))
}

// OuContainsFold applies the ContainsFold predicate on the "ou" field.
func OuContainsFold(v string) predicate.Game {
	return predicate.Game(sql.FieldContainsFold(FieldOu, v))
}

// CuEQ applies the EQ predicate on the "cu" field.
func CuEQ(v string) predicate.Game {
	return predicate.Game(sql.FieldEQ(FieldCu, v))
}

// CuNEQ applies the NEQ predicate on the "cu" field.
func CuNEQ(v string) predicate.Game {
	return predicate.Game(sql.FieldNEQ(FieldCu, v))
}

// CuIn applies the In predicate on the "cu" field.
func CuIn(vs ...string) predicate.Game {
	return predicate.Game(sql.FieldIn(FieldCu, vs...))
}

// CuNotIn applies the NotIn predicate on the "cu" field.
func CuNotIn(vs ...string) predicate.Game {
	return predicate.Game(sql.FieldNotIn(FieldCu, vs...))
}

// CuGT applies the GT predicate on the "cu" field.
func CuGT(v string) predicate.Game {
	return predicate.Game(sql.FieldGT(FieldCu, v))
}

// CuGTE applies the GTE predicate on the "cu" field.
func CuGTE(v string) predicate.Game {
	return predicate.Game(sql.FieldGTE(FieldCu, v))
}

// CuLT applies the LT predicate on the "cu" field.
func CuLT(v string) predicate.Game {
	return predicate.Game(sql.FieldLT(FieldCu, v))
}

// CuLTE applies the LTE predicate on the "cu" field.
func CuLTE(v string) predicate.Game {
	return predicate.Game(sql.FieldLTE(FieldCu, v))
}

// CuContains applies the Contains predicate on the "cu" field.
func CuContains(v string) predicate.Game {
	return predicate.Game(sql.FieldContains(FieldCu, v))
}

// CuHasPrefix applies the HasPrefix predicate on the "cu" field.
func CuHasPrefix(v string) predicate.Game {
	return predicate.Game(sql.FieldHasPrefix(FieldCu, v))
}

// CuHasSuffix applies the HasSuffix predicate on the "cu" field.
func CuHasSuffix(v string) predicate.Game {
	return predicate.Game(sql.FieldHasSuffix(FieldCu, v))
}

// CuEqualFold applies the EqualFold predicate on the "cu" field.
func CuEqualFold(v string) predicate.Game {
	return predicate.Game(sql.FieldEqualFold(FieldCu, v))
}

// CuContainsFold applies the ContainsFold predicate on the "cu" field.
func CuContainsFold(v string) predicate.Game {
	return predicate.Game(sql.FieldContainsFold(FieldCu, v))
}

// NotesEQ applies the EQ predicate on the "notes" field.
func NotesEQ(v string) predicate.Game {
	return predicate.Game(sql.FieldEQ(FieldNotes, v))
}

// NotesNEQ applies the NEQ predicate on the "notes" field.
func NotesNEQ(v string) predicate.Game {
	return predicate.Game(sql.FieldNEQ(FieldNotes, v))
}

// NotesIn applies the In predicate on the "notes" field.
func NotesIn(vs ...string) predicate.Game {
	return predicate.Game(sql.FieldIn(FieldNotes, vs...))
}

// NotesNotIn applies the NotIn predicate on the "notes" field.
func NotesNotIn(vs ...string) predicate.Game {
	return predicate.Game(sql.FieldNotIn(FieldNotes, vs...))
}

// NotesGT applies the GT predicate on the "notes" field.
func NotesGT(v string) predicate.Game {
	return predicate.Game(sql.FieldGT(FieldNotes, v))
}

// NotesGTE applies the GTE predicate on the "notes" field.
func NotesGTE(v string) predicate.Game {
	return predicate.Game(sql.FieldGTE(FieldNotes, v))
}

// NotesLT applies the LT predicate on the "notes" field.
func NotesLT(v string) predicate.Game {
	return predicate.Game(sql.FieldLT(FieldNotes, v))
}

// NotesLTE applies the LTE predicate on the "notes" field.
func NotesLTE(v string) predicate.Game {
	return predicate.Game(sql.FieldLTE(FieldNotes, v))
}

// NotesContains applies the Contains predicate on the "notes" field.
func NotesContains(v string) predicate.Game {
	return predicate.Game(sql.FieldContains(FieldNotes, v))
}

// NotesHasPrefix applies the HasPrefix predicate on the "notes" field.
func NotesHasPrefix(v string) predicate.Game {
	return predicate.Game(sql.FieldHasPrefix(FieldNotes, v))
}

// NotesHasSuffix applies the HasSuffix predicate on the "notes" field.
func NotesHasSuffix(v string) predicate.Game {
	return predicate.Game(sql.FieldHasSuffix(FieldNotes, v))
}

// NotesEqualFold applies the EqualFold predicate on the "notes" field.
func NotesEqualFold(v string) predicate.Game {
	return predicate.Game(sql.FieldEqualFold(FieldNotes, v))
}

// NotesContainsFold applies the ContainsFold predicate on the "notes" field.
func NotesContainsFold(v string) predicate.Game {
	return predicate.Game(sql.FieldContainsFold(FieldNotes, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, UserTable, UserPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Game) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Game) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Game) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		p(s.Not())
	})
}
